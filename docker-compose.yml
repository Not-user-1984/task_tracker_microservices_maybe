version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "zkServer.sh", "status"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - my_network

  kafka:
    image: confluentinc/cp-kafka:7.0.0
    container_name: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "kafka-topics", "--list", "--bootstrap-server", "kafka:9092"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - my_network

  kafka-connect-ui:
    image: landoop/kafka-connect-ui
    container_name: kafka-connect-ui
    ports:
      - "8010:8000"
    environment:
      CONNECT_URL: http://debezium-connector:8083
    depends_on:
      - debezium-connector
    networks:
      - my_network

  debezium-connector:
    build: kafka-connect/.
    container_name: debezium-connector
    env_file:
      - ./kafka-connect/.env
    depends_on:
      - kafka
      - zookeeper
    networks:
      - my_network

  db_django:
    image: postgres:latest
    container_name: db_django
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./user_team_service/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./user_team_service/postgresql.conf:/etc/postgresql/postgresql.conf
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    env_file:
      - ./user_team_service/.env
    networks:
      - my_network

  db_task:
    image: postgres:latest
    container_name: db_task
    restart: always
    ports:
      - "5433:5432"
    volumes:
      - postgres_data_task:/var/lib/postgresql/data
    env_file:
      - ./task_meeting_service/.env
    networks:
      - my_network

  user_team_service:
    build: user_team_service/.
    container_name: user_team_service

    volumes:
      - ./user_team_service:/app
      - ./user_team_service/staticfiles:/app/staticfiles 
    ports:
      - "8000:8000"
    depends_on:
      - kafka
      - db_django
    env_file:
      - ./user_team_service/.env
      
    networks:
      - my_network

  task_meeting_service:
    build:  task_meeting_service/.
    container_name: task_meeting_service
    volumes:
      - ./task_meeting_service:/app
    ports:
      - "8001:8001"
    depends_on:
      - db_django
      - kafka
    env_file:
      - ./task_meeting_service/.env
    networks:
      - my_network

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./user_team_service/static:/app/static
    depends_on:
      - user_team_service
      - task_meeting_service
    networks:
      - my_network

  notification_email:
    build: ./notification_email
    container_name: notification_email
    ports:
      - "8080:8080"
    volumes:
      - ./notification_email:/app
    depends_on:
      - kafka
    environment:
      KAFKA_BROKER: kafka:9092
    networks:
      - my_network

  vue-app:
    build: ./vue-app
    container_name: vue-app
    ports:
      - "8081:8080"
    volumes:
      - ./vue-app:/app
      - /app/node_modules
    networks:
      - my_network


networks:
  my_network:
    driver: bridge

volumes:
  postgres_data:
  postgres_data_task:
