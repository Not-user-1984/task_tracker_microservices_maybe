version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - my_network

  kafka:
    image: confluentinc/cp-kafka:7.0.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    depends_on:
      - zookeeper
    networks:
      - my_network
  kafka-connect-ui:
    image: landoop/kafka-connect-ui
    container_name: kafka-connect-ui
    ports:
      - "8010:8000"
    environment:
      CONNECT_URL: http://debezium-connector:8083
    depends_on:
      - debezium-connector
    networks:
      - my_network
  # kafka-connect:
  #   image: confluentinc/cp-kafka-connect:latest 
  #   container_name: kafka-connect
  #   ports:
  #     - "8083:8083"
  #   environment:
  #     BOOTSTRAP_SERVERS: kafka:9092
  #     GROUP_ID: connect-cluster
  #     CONFIG_STORAGE_TOPIC: connect-configs
  #     OFFSET_STORAGE_TOPIC: connect-offsets
  #     STATUS_STORAGE_TOPIC: connect-status
  #     KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
  #     VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
  #     INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
  #     INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
  #     REST_ADVERTISED_HOST_NAME: kafka-connect
  #   depends_on:
  #     - kafka
  #     - zookeeper
  #   networks:
  #     - my_network

  # Debezium PostgreSQL Connector
  debezium-connector:
    build: kafka-connect/.
    container_name: debezium-connector
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: connect-cluster
      CONFIG_STORAGE_TOPIC: connect-configs
      OFFSET_STORAGE_TOPIC: connect-offsets
      STATUS_STORAGE_TOPIC: connect-status
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      REST_ADVERTISED_HOST_NAME: debezium-connector
      CONNECT_PLUGIN_PATH:  "/kafka/connect,/kafka/libs,/usr/share/java,/usr/share/confluent-hub-components"
    depends_on:
      - kafka
      - zookeeper
    networks:
      - my_network

  db_django:
    image: postgres:latest
    container_name: db_django
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}

    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./user_team_service/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./user_team_service/postgresql.conf:/etc/postgresql/postgresql.conf
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    env_file:
      - ./user_team_service/.env
    networks:
      - my_network  

  # redis:
  #   image: redis:latest
  #   container_name: redis
  #   command: redis-server --bind 0.0.0.0
  #   restart: always
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   networks:
  #     - my_network

  user_team_service:
    build: user_team_service/.
    container_name: user_team_service

    volumes:
      - ./user_team_service:/app
      - ./user_team_service/staticfiles:/app/staticfiles 
    ports:
      - "8000:8000"
    depends_on:
      - kafka
      - db_django
    #   - db
    #   - redis
    env_file:
      - .env
      
    networks:
      - my_network

  task_meeting_service:
    build:  task_meeting_service/.
    container_name: task_meeting_service
    volumes:
      - ./task_meeting_service:/app
    ports:
      - "8001:8001"
    depends_on:
      - db_django
      - kafka
    env_file:
      - .env
    networks:
      - my_network

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./user_team_service/static:/app/static
    depends_on:
      - user_team_service
      # - fastapi
    networks:
      - my_network

networks:
  my_network:
    driver: bridge

volumes:
  postgres_data:
  # redis_data: